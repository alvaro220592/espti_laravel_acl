Este projeto está em laravel 5.2

Os videos estão em: https://www.youtube.com/playlist?list=PLVSNL1PHDWvTch1r8uTSluw9SkzSA9cDJ

aula 4 - auth laravel - sistema de scaffolding
    php artisan make:auth
    precisou alterar o namespace do User na model User, no AuthController e no config/auth.php pq usei as models dentro da pasta models

aula 5 cadastrando e listando posts

aula 6 - iniciando acl com laravel
    onde define os acl é no authServiceProvider, função boot

aula 8 - criando políticas
    serve pra não ter q colocar todos os define num arquivo só, fazendo ele ficar extenso.
    php artisan:make policy PostPolicy
        isso vai criar um arquivo dentro de app/policies. No laravel 8 essa pasta nao existe a menos que se crie uma policy

        Depois de criar a policy, é preciso ir ao authServiceProvider e registrar a policy criada no array policies
        ficaria assim: $policies = [Post::class => PostPolicy::class]; e tem que importar a model Post e a policy PostPolicy.
        Agora os define de Post serão colocados(de forma diferente) no PostPolicy dentro de um método criado(no meu caso "updatePost()") ao invés de no authServiceProvider.
        Agora tanto na view(na parte do can), quanto no controller caso use Gate::deny, se coloca o mesmo nome do método criado no PostPolicy: @can('updatePost', $post), ou  if(Gate::denies('updatePost', $post))

aula 9 - criando migrations ACL FOR LARGE SYSTEMS - aquelas coisas de roles, permissions etc
    php artisan make:model models/Role -m
    php artisan make:model models/Permission -m
    A tabela associativa role_user foi criada dentro da migration de roles e tambem sua função 'down' no mesmo arquivo. Esta(roles) tem que ser criada primeiro pq a tabela associativa dela é associada com uma que já existe(users). A de permissions é criada depois pq sua tabela associativa é associada à roles que é criada agora.
    A tabela associativa permission_role foi criada dentro da migration de permission e tambem sua função 'down' no mesmo arquivo

aula 10 - definindo habilidades de permissao dinamicamente
    foi feito um insert de 3 roles: admin, manager e editor
    foi feito um insert de 3 permissions: view_post, edit_post e delete_post
    foi feito insert em permission_rule pra definir o que o adm vai poder fazer, o manager, etc;
    foi feito insert na role_user pra definir quem é o q e tal.

    Em authServiceProvider, foi deletada a linha q chama a policy PostPolicy, pois não vai trabalhar mais com isso. No mesmo arquivo, foi dado um 'use' na model de permissões. Na model Permission foi criada uma função que retorna todas as roles vinculadas a uma determinada permissão atraves de um belongsToMany.
    No authServiceProvider foi criada uma lógica lá em boot() pra pegar as permissões.
    A função hasPermission() na função boot() teve que ser criada na model User.
    Na model user tbm foi criada a função hasAnyRole().
    na model user tbm foi criada a função roles pra ver q perfis estão associados ao usuário logado e esa função foi feita com um belongsToMany